/* int	ft_count_cross_table(int *current)
{
	int	count;
	int	i;

	count = 0;
	i = 1;
	while (i < 5)
	{
		if (current[i] + current[i + 5] == 4 && current[i] == 2)
			count += 6;
		else if (current[i] + current[i + 5] == 3)
			count += 2;
		else
			count += 3;
		i++;
	}
	return ((count + 4) * 3);
} */

/* int	ft_count_posibilities(int *current)
{
	int	count;
	int	i;

	count = 0;
	i = 0;
	while (i < 5)
	{
		if (current[i] + current[i + 5] == 4 && current[i] == 2)
		{
			if (i == 0)
				count += 6;
			else
				count += 3;
		}
		else if (current[i] + current[i + 5] == 3)
			count += 2;
		else
			count += 3;
		i++;
	}
	return (count * 4);
} */

/* void	ft_fill_cross_table(int *current, int *cross, int size)
{
	int	i;
	int	*posibilities;

	i = 1;
	posibilities = (int *)malloc(ft_count_posibilities(current) * 4);
} */

/* void	ft_cross_match_OL(int index, int *found_data, int *current, int *solved)
{
	int	*cross_match_table;
	int	size;

	if (ft_found_four(found_data) == 1)
	{
		size = ft_count_cross_table(current);
		cross_match_table = (int *)malloc(size * 4);
		ft_fill_cross_table(current, cross_match_table, size);
	}
} */